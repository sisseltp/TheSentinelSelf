// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel BiomeUpdate
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


// data struct
struct Sentinel
{
	float connections;
	int played;
	float speed;
	float phase;
	float cohPhi;
	float coherenceRadius;
	float couplingRange;
	float noiseScl;
	float coupling;
	float attractionScl;
	float3 pos;
};

struct GPUOutput
{
	float3 vel;
	float phaseAdition;
};

// img texture just for itterating
RWTexture2D<float4> Result;

// data structures for the different ellement
RWStructuredBuffer<Sentinel> sentinelData;
RWStructuredBuffer<Sentinel> biomeData;
RWStructuredBuffer<Sentinel> plasticData;

RWStructuredBuffer<GPUOutput> sentinelDataOut;
RWStructuredBuffer<GPUOutput> biomeDataOut;
RWStructuredBuffer<GPUOutput> plasticDataOut;

// variables for the kuramoto
static const float PI = 3.14159265f;
static const float CIRCLE_IN_RADIAN = 2 * PI;
static const float RADIAN_TO_NORMALIZED = 1 / CIRCLE_IN_RADIAN;

// sumx + sumy to hold the total/avrg oscilation pos of neighbours
float sumx = 0;
float sumy = 0;

// deltaTime
float dt;

// phase positions of agent thats being calculated
float phaseX;
float phaseY;

float3 senVel = float3(0,0,0);


// adds the phases x+y oscilation to the sumx/y and returns the distance between its oscilation and this runs particle
float  AddOscilations(float phase) {
	// phase in radians
	float theta = phase * CIRCLE_IN_RADIAN;
	// get this phases x,y pos
	float thisX = cos(theta);
	float thisY = sin(theta);
	// add to oscilation values to sums (total) 
	sumx += thisX;
	sumy += thisY;
	// find the distance between the two cycles (between 0-2 as its sin/cos positions)
	float sigDst = distance(float2(phaseX, phaseY), float2(thisX, thisY));
	// minus 1 so betwenn -1-1
	sigDst -= 1;
	// invert
	sigDst *= -1;
	return sigDst;
}


//Biom to biom coherence function
void Bio2BioCOHERENCE(int id) {


	// loop over biome 
	for (int b = 0; b < int( biomeData.Length); b++)
	{
		// if not this agent and being played
		if (int(b) != int(id) && biomeData[b].played >0) {

			// get the distance between the two agents
			float dist = distance(biomeData[b].pos, biomeData[id].pos);

			// if less than coupling range
			if (dist < biomeData[id].couplingRange)
			{
				// add the phase and get the distance between the two
				float sigDst = AddOscilations(biomeData[b].phase);
				// add the vector between the two * the distance in cycles
				//biomeDataOut[id].vel += (biomeData[b].pos - biomeData[id].pos) * sigDst * biomeData[id].attractionScl ;
				// add 1 to connections
				biomeData[id].connections += 1;
			}
		}
	}

}

// Biome to sentinel coherence funtion
void Bio2SenCOHERENCE(int id) {

	// loop over sentinels 
	for (int s = 0; s < int(sentinelData.Length); s++)
	{
		if (biomeData[id].played ==1) {
			// get the distance between the two agents
			float dist = distance(sentinelData[s].pos, biomeData[id].pos);

			// if less than coupling range
			if (dist < sentinelData[s].couplingRange)
			{
				// add the phase and get the distance between the two twice
				AddOscilations(sentinelData[s].phase);
				float sigDst = AddOscilations(sentinelData[s].phase);
				//add two connections
				biomeData[id].connections += 2;
				// add the vector between the two * the distance in cycles
				//biomeDataOut[id].vel += (normalize(sentinelData[s].pos - biomeData[id].pos) * sigDst * sentinelData[s].attractionScl) * 2;


			}
		}
	}

}


// plastic to sentinel coherence functions
void Plas2SenCOHERENCE(int id) {


	// loop over plastics 
	for (int b = 0; b < int(plasticData.Length); b++)
	{
		// if playing
		if (plasticData[b].played == 1) {
			// get the distance between the two agents
			float dist = distance(plasticData[b].pos, sentinelData[id].pos);

			// if less than plastic agents coupling range
			if (dist < plasticData[b].couplingRange)
			{
				// add the phase and get the distance between the two twice
				float sigDst = AddOscilations(plasticData[b].phase);
				AddOscilations(plasticData[b].phase);

				// add the vector between the two * the distance in cycles * 2
				sentinelDataOut[id].vel += (normalize(plasticData[b].pos - sentinelData[id].pos)  * plasticData[b].attractionScl) * 2;

				// add two to the Connections
				sentinelData[id].connections += 2.0;;
			}
		}
	}

}

// sentinels to biome function
void Sen2BioCOHERENCE(int id) {

	senVel = float3(0, 0, 0);

	// set index to -1 as a gate + value holder
	int indx = -1;
	// set min dist to a high value
	float minDist = 1000000000;

	float thisSigDist = 0;

	// loop over biome 
	for (int b = 0; b < int(biomeData.Length); b++)
	{
		// if the biome is playing
		if( biomeData[b].played == 1){

			// get the distance between the two agents
			float dist = distance(biomeData[b].pos, sentinelData[id].pos);

			if (dist < sentinelData[id].couplingRange)
			{

				// if it is the shortest difference in oscilation
				if (dist < minDist) {
					//set the index to this one
					indx = b;
					// set the mindist to this sigdist
					minDist = dist;
				}
			}
		}
	}

	// if there has been a connection
	if (indx != -1) {
		// add the vector between the two 
		senVel = normalize(biomeData[indx].pos - sentinelData[id].pos) * sentinelData[id].attractionScl;
	}
}
// basic noise function
float Noise(float3 co)
{
	return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 45.5432))) * 43758.5453);
}

void SetPhases(float p) {
	// times the points value by 2*Pi
	float theta = p * CIRCLE_IN_RADIAN;
	// get this agents phase x,y
	phaseX = cos(theta);
	phaseY = sin(theta);
}

// main function
[numthreads(1,1,1)]
void BiomeUpdate (uint3 id : SV_DispatchThreadID)
{
	// reset sums to 0
	 sumx = 0;
	 sumy = 0;
	 
	 // if in sentinel range
	if (int(id.x) < int(sentinelData.Length)) {

		// reset num connections
		sentinelData[id.x].connections = 0;
		//reset the vel
		sentinelDataOut[id.x].vel = float3(0, 0, 0);

		// set the phase value
		SetPhases(sentinelData[id.x].phase);
		
		// sentinel to biome interaction
		Sen2BioCOHERENCE(int(id.x));
		// plastic to sentinel interaction
		Plas2SenCOHERENCE(int(id.x));
		

		// if the count is not 0 (its connected)
		if (sentinelData[id.x].connections != 0) {

			// average the values over total num connections 
			sumx /= float( sentinelData[id.x].connections);
			sumy /= float(sentinelData[id.x].connections);


			// angle to x,y pos to positive x axis
			sentinelData[id.x].cohPhi = atan2(sumy, sumx) * RADIAN_TO_NORMALIZED;
			// distance to 0
			sentinelData[id.x].coherenceRadius = sqrt(sumx * sumx + sumy * sumy);

			// get the noise
			float thisNoise = sentinelData[id.x].noiseScl * Noise(sentinelData[id.x].pos);

			// not sure but im guessing the main distance to phase function sin((angleDistToX-phase) * (2*Pi))
			float calc = sin((sentinelData[id.x].cohPhi - sentinelData[id.x].phase) * CIRCLE_IN_RADIAN);

			// second phase (scaler * distTo0 * lastClac)
			calc = sentinelData[id.x].coupling * sentinelData[id.x].coherenceRadius * calc;

			// add the speed noise and calc together and times by delta time, and add to Phase
			sentinelDataOut[id.x].phaseAdition =  (sentinelData[id.x].speed + abs(thisNoise) + calc);
			
		}
		else {// else no connection
			// get the noise
			float thisNoise = sentinelData[id.x].noiseScl * Noise(sentinelData[id.x].pos);
			// add the speed + noise to the phase * deltatime
			sentinelDataOut[id.x].phaseAdition =  (sentinelData[id.x].speed + abs(thisNoise));
			
		}
	
	
		sentinelDataOut[id.x].vel = senVel;
		// times vel by detla time and phase
		
		

	}// if in biome section
	else if (int(id.x) < int(biomeData.Length + sentinelData.Length)) {
		// set the offseted index
		int indx = id.x - int(sentinelData.Length) ;
		if (biomeData[indx].played > 0) {
			// reset the vel
			biomeDataOut[indx].vel = float3(0, 0, 0);

			// reset num connections
			biomeData[indx].connections = 0;

			// set the global phases
			SetPhases(biomeData[indx].phase);

			// biome 2 biome function
			Bio2BioCOHERENCE(indx);
			// biome to sentinel funtion
			Bio2SenCOHERENCE(indx);

			// if the count is 0 (its connected)
			if (biomeData[indx].connections != 0) {

				// average the values over total num neighbors 
				sumx /= float(biomeData[indx].connections);
				sumy /= float(biomeData[indx].connections);
				biomeDataOut[indx].vel /= biomeData[indx].connections;
				// angle to x,y pos to positive x axis
				biomeData[indx].cohPhi = atan2(sumy, sumx) * RADIAN_TO_NORMALIZED;
				// distance to 0
				biomeData[indx].coherenceRadius = sqrt(sumx * sumx + sumy * sumy);

				// get the noise
				float thisNoise = biomeData[indx].noiseScl * Noise(biomeData[indx].pos);
				// not sure but im guessing the main distance to phase function sin((angleDistToX-phase) * (2*Pi))
				float calc = sin((biomeData[indx].cohPhi - biomeData[indx].phase) * CIRCLE_IN_RADIAN);
				// second phase (scaler * distTo0 * lastClac)
				calc = biomeData[indx].coupling * biomeData[indx].coherenceRadius * calc;
				// add the speed noise and calc together and times by delta time, and add to P
				biomeDataOut[indx].phaseAdition =  (biomeData[indx].speed + abs(thisNoise) + calc);

			}
			else {
				// else no connects just add speed + noise * delta time
				float thisNoise = biomeData[indx].noiseScl * Noise(biomeData[indx].pos);
				biomeDataOut[indx].phaseAdition =  (biomeData[indx].speed + abs(thisNoise));
			}

		
		
		}
		
	} // else if plasitcs
	else if (int(id.x) < int(biomeData.Length + sentinelData.Length + plasticData.Length)) {
	
		// set the offset indx		
		int indx = id.x - int(biomeData.Length) - int(sentinelData.Length);
		if (plasticData[indx].played == 1) {
			float thisNoise = plasticData[indx].noiseScl * Noise(plasticData[indx].pos);
			plasticDataOut[indx].phaseAdition = (plasticData[indx].speed + abs(thisNoise));


			// set min dist to a high number
			float minDist = 1000000;
			// set closest indx to -1 as a gate
			int closestIndx = -1;

			// loop over plastics
			for (int s = 0; s < int(sentinelData.Length); s++)
			{
				if (plasticData[indx].played == 1) {

					// get the distance between the two agents
					float dist = distance(sentinelData[s].pos, plasticData[indx].pos);

					// if less than coupling range and less than mindist
					if (dist < plasticData[indx].couplingRange) {
						if (dist < minDist) {
							minDist = dist; //set the mindist from distance 
							closestIndx = s; // set the index
						}
					}
				}
			}

			//if there has been connected
			if (closestIndx != -1) {
				// add the velocity
				plasticDataOut[indx].vel = normalize(sentinelData[closestIndx].pos - plasticData[indx].pos) * plasticData[indx].attractionScl;
				
			}
			else {
				plasticDataOut[indx].vel = float3(0, 0, 0);
			}
		}
	}

}

